#!/usr/bin/env python

import argparse
import gzip
import os
import logging

from mpi4py import MPI
from Bio import SeqIO
import numpy as np
import h5py

def parse_args():
    parser = argparse.ArgumentParser()

    parser.add_argument('--input', default='/dev/stdin')
    parser.add_argument('--hdf5', required=True)
    parser.add_argument('--format', default='fasta')
    parser.add_argument('--gzip', default=False, action='store_true', help='sequences are gzipped?')
    parser.add_argument('--log', default='/dev/stderr')

    return parser.parse_args()


def main():
    args = parse_args()

    h5_file = h5py.File(args.hdf5, 'w', driver='mpio', comm=MPI.COMM_WORLD)

    logging.basicConfig(level=logging.INFO, filename=args.log)

    dset = h5_file.create_dataset('sequences',
                                  (100,),
                                  dtype=h5py.special_dtype(vlen=str),
                                  maxshape=(None, ),
                                  chunks=True)


    if args.gzip:
        opener = gzip.open
    else:
        opener = open

    size = float(os.path.getsize(args.input))

    # todo: catch CTRL-C and remember to close the file
    with opener(args.input) as handle:
        records = SeqIO.parse(handle, args.format)

        for i, record in enumerate(records):
            try:
                dset[i] = str(record.seq)
            except ValueError:
                dset.resize(dset.size + 100, axis=0)
                dset[i] = str(record.seq)

            if i%1000 == 0:
                posn = handle.tell()
                logging.info('%.2g' % (posn/size))


    h5_file.close()


if __name__ == '__main__':
    main()
